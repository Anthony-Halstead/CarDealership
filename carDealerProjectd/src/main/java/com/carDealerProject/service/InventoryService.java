package com.carDealerProject.service;

import com.carDealerProject.repo.InventoryRepo;
import com.carDealerProject.entity.Car;
import com.carDealerProject.entity.Inventory;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


@Service

public class InventoryService {
    @Autowired
    private InventoryRepo InventoryRepo;

    public Inventory save(Inventory Inventory) {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

	    return InventoryRepo.save(Inventory);
	}
	
	public Inventory update(Inventory Inventory) throws Exception {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

        if(Inventory.getId() != null) {
	        return InventoryRepo.save(Inventory);
        }

        throw new Exception("Object does not exist! id not present");
	}
    
    public Inventory findById(Integer InventoryId) throws Error {
        
    	// Find by is another predefined repo function, you can always find by the primary key
    	// when you use findById, its good practice to use the isPresent in an if check first
    	// It will tell you if a object was actually found, with true or false values, true if found, false is not
    	// It will always return an Optional Object, the Inventory will be there if found, null if not
    	// If found, give the object back with a .get() to grab it off the Optional object
    	
        if(InventoryRepo.findById(InventoryId).isPresent()) {
            return InventoryRepo.findById(InventoryId).get();
        }
        
        // if Inventory is not present, throw error so front end can handle it
        throw new Error("No Inventory id present, Inventory not found, send an id billy, dumbass");
        
    }

	public List<Inventory> findAll() {
		return InventoryRepo.findAll();
	}

    public void deleteById(Integer id) {
	    InventoryRepo.deleteById(id);
	}

	public Inventory addCarToInventory(Integer InventoryID, Car car){
		Inventory Inventory = findById(InventoryID);
		Inventory.getCarsInInventory().add(car);
		return InventoryRepo.save(Inventory);
	}

    public Inventory removeCarFromInventory(Integer InventoryID, Car car){
        Inventory Inventory = findById(InventoryID);
		Inventory.getCarsInInventory().remove(car);
		return InventoryRepo.save(Inventory);
    }
}
