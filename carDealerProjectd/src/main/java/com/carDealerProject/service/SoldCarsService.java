package com.carDealerProject.service;

import com.carDealerProject.repo.SoldCarsRepo;
import com.carDealerProject.entity.Car;
import com.carDealerProject.entity.SoldCars;

import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

public class SoldCarsService {
    @Autowired
    private SoldCarsRepo soldCarsRepo;

    public SoldCars save(SoldCars soldCars) {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

	    return soldCarsRepo.save(soldCars);
	}
	
	public SoldCars update(SoldCars soldCars) throws Exception {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

        if(soldCars.getId() != null) {
	        return soldCarsRepo.save(soldCars);
        }

        throw new Exception("Object does not exist! id not present");
	}
    
    public SoldCars findById(Integer soldCarsId) throws Error {
        
    	// Find by is another predefined repo function, you can always find by the primary key
    	// when you use findById, its good practice to use the isPresent in an if check first
    	// It will tell you if a object was actually found, with true or false values, true if found, false is not
    	// It will always return an Optional Object, the SoldCars will be there if found, null if not
    	// If found, give the object back with a .get() to grab it off the Optional object
    	
        if(soldCarsRepo.findById(soldCarsId).isPresent()) {
            return soldCarsRepo.findById(soldCarsId).get();
        }
        
        // if SoldCars is not present, throw error so front end can handle it
        throw new Error("No SoldCars id present, SoldCars not found, send an id billy, dumbass");
        
    }

	public List<SoldCars> findAll() {
		return soldCarsRepo.findAll();
	}

    public void deleteById(Integer id) {
	    soldCarsRepo.deleteById(id);
	}

	public SoldCars addCarToSoldCars(Integer soldCarsID, Car car){
		SoldCars soldCars = findById(soldCarsID);
		soldCars.getPastSoldCars().add(car);
		return soldCarsRepo.save(soldCars);
	}

}
